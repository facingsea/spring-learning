<beans xmlns="http://www.springframework.org/schema/beans"    
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:aop="http://www.springframework.org/schema/aop"   
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xsi:schemaLocation="    
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	
	<!-- 加载properties文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc-mysql.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 开启注解扫描包 -->
	<context:annotation-config></context:annotation-config>
	<context:component-scan base-package="com.facingsea">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- c3p0数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driver_class}" />
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<!--连接池中保留的最小连接数。-->
		<property name="minPoolSize" value="5" />
	
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="30" />
	
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="10"/>
	
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="60"/>
	
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="5" />
	
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements  
			属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。  
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
		<property name="maxStatements" value="0" />
	
		<!--每1小时检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="86400" />
	
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 3 -->
		<property name="acquireRetryAttempts" value="3" />
	
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效  
			保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试  
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
		<property name="breakAfterAcquireFailure" value="true" />
	</bean>


	<!-- session factory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 注入dataSource -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 加载hibernate配置文件 -->
		<!--  
		<property name="configLocation">
			<value>classpath:hibernate.cfg.xml</value>
		</property>
		-->
		<!-- 加载所有hbm.xml映射文件 -->
		<property name="mappingLocations">
			<list>
				<value>classpath:/com/facingsea/sh/domain/*.hbm.xml</value>
			</list>
		</property>
		<!-- 加载hibernate属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
			</props>
		</property>
	</bean>
	
	<!-- transaction manager -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	
	<!-- 事务注解,配置后可以直接替换掉下面的txAdvice和aop，然后在具体的类中配置相应注解-->
	<!--  
	<tx:annotation-driven transaction-manager="txManager"/>
	-->
	
	<!-- 事务通知属性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 定义事务隔离级别、传播行为 -->
		<tx:attributes>
			<tx:method name="save*" isolation="DEFAULT" propagation="REQUIRED" />
			<tx:method name="update*" isolation="DEFAULT" propagation="REQUIRED" />
			<tx:method name="delete*" isolation="DEFAULT" propagation="REQUIRED" />
			<tx:method name="*" isolation="DEFAULT" propagation="REQUIRED" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 配置事务切面 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.facingsea.sh.**.service..*.*(..))" id="txPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
	
	
</beans>